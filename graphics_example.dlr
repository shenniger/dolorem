include "def.dlr";
include "sdl2.dlr";

funproto puts (str a;) void;
funproto printf (str a; i32 x;) void;

defun draw (SDL_Renderer renderer;) void {
  SDL_SetRenderDrawColor renderer 255 255 255 0;
  SDL_RenderClear renderer;
  SDL_SetRenderDrawColor renderer 255 0 0 0;
  SDL_RenderDrawLine renderer 0 0 800 600;
  SDL_RenderPresent renderer;
};

defun call-draw-funptr (((funptr (SDL_Renderer renderer;) void) a) SDL_Renderer renderer;) void {
  call-funptr a renderer;
};

defun main () i32 {
  printf "%i" (sizeof (ptr i32)); puts "";
  := running 1;
  := window (SDL_CreateWindow "Dolorem" 0 0 800 600 4);
  := renderer (SDL_CreateRenderer window -1 1);
  while running {
    := draw-fun (funptr-to draw);
    call-draw-funptr draw-fun renderer;
    cond (> (SDL_GetTicks) 3000) {
      assign running 0;
    };
  };
  SDL_DestroyRenderer renderer;
  SDL_DestroyWindow window;
 0
};

defmacro run { main; (empty-rtv) };
run;
